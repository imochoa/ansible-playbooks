---
- name: VSCode Plugins
  block:
    - name: Check if vscode is installed
      ansible.builtin.command: which code
      register: vscode_check
      ignore_errors: true
      check_mode: false
      changed_when: false

    - name: Get the installed VSCode extensions
      when: vscode_check.rc == 0
      ansible.builtin.command:
        cmd: "code --list-extensions"
      register: cmd_vscode_exts
      ignore_errors: true

    - name: Install VSCode extensions
      when: vscode_check.rc == 0
      ansible.builtin.command:
        cmd: "code --install-extension '{{ item }}'"
      loop: "{{ filtered_vscode_exts }}"
      vars:
        # TODO: if empty, might need something like: "{{ users | union(extra_users | default ([])) }}"
        vscode_ext_list: "{{ cmd_vscode_exts.stdout | split() }}"
        filtered_vscode_exts: "{{ unix.vscode.extensions | difference(vscode_ext_list) }}"

- name: VSCode User Settings
  vars:
    os_dependent_path: "{{ (is_macos) | ternary('Library/Application Support', '.config') }}"
    vscode_user_settings_json: "{{ local_home }}/{{ os_dependent_path }}/Code/User/settings.json"
  block:
    - name: Add content if empty
      ansible.builtin.copy:
        dest: "{{ vscode_user_settings_json }}"
        content: "{}"
        mode: "0644"
        # don't overwrite existing file
        force: false

    # install json5
    # run it!
    #  npx -y -- json5 -s 2 settings.json -o settings.jsonnpx -y -- json5 -s 2 settings.json -o settings.json

    # explode all paths before merging!
    # jq '
    # # recursive walk (from the jq cookbook)
    # def walk(f):
    #   if type=="object" then
    #     . as $in
    #     | reduce keys[] as $k ({}; . + { ($k): ($in[$k] | walk(f)) }) | f
    #   elif type=="array" then map( walk(f) ) | f
    #   else f
    #   end;

    # # expand dotted keys in a single object, turning numeric segments into indices
    # def expand_dots:
    #   to_entries
    #   | map({ path: (.key | split(".") | map(if test("^[0-9]+$") then tonumber else . end)), val: .value })
    #   | reduce .[] as $e ({}; setpath($e.path; $e.val));

    # # apply recursively to every object
    # walk( if type=="object" then expand_dots else . end )
    # ' settings.json

    - name: Load var from file
      ansible.builtin.slurp:
        src: "{{ vscode_user_settings_json }}"
      register: imported_vscode_settings

    # - debug:
    #     msg: "{{ imported_vscode_settings.content|b64decode|from_json }}"
    - name: Append more key/values and write to file
      vars:
        settings_as_dict: "{{ imported_vscode_settings.content | b64decode | from_json | default({}) }}"
        new_settings: "{{ unix.vscode.user_settings | from_yaml | default({}) }}"
        merged_settings: "{{ settings_as_dict | combine(new_settings, recursive=True) }}"
      ansible.builtin.copy:
        content: "{{ merged_settings | to_nice_json }}"
        dest: "{{ vscode_user_settings_json }}"
      # debug:
      #   var: merged_settings
