---
- name: Only macos
  when: is_macos
  ansible.builtin.debug:
    msg: to do macos

- name: Pls no
  when: is_debian
  ansible.builtin.debug:
    msg: do not print this

- name: Joplin Plugins
  tags:
    - joplin
  vars:
    joplin_plugin_dir: "{{ local_home }}/.config/joplin-desktop/plugins"
  block:
    - name: Check that joplin is installed
      ansible.builtin.debug:
        msg: to do make sure that Joplin is installed

    - name: Ensure the joplin plugin directory exists
      ansible.builtin.file:
        path: "{{ joplin_plugin_dir }}"
        state: directory
        owner: "{{ user_name }}"
        # group: "{{ user_name }}"
        mode: "0751"

    - name: Get the installed Joplin extensions
      ansible.builtin.shell:
        cmd: "ls {{ joplin_plugin_dir }} | rev | cut -d. -f2- | rev"
      register: cmd_joplin_plugins
      ignore_errors: true

    - name: Download missing Joplin plugins
      ansible.builtin.get_url:
        url: "https://raw.githubusercontent.com/joplin/plugins/master/plugins/{{ item }}/plugin.jpl"
        dest: "{{ joplin_plugin_dir }}/{{ item }}.jpl"
        mode: "0644"
      loop: "{{ filtered_joplin_plugins }}"
      vars:
        joplin_plugin_list: "{{ cmd_joplin_plugins.stdout | split() }}"
        filtered_joplin_plugins: "{{ joplin_plugins | difference(joplin_plugin_list) }}"

- name: VSCode Plugins
  tags:
    - vscode
  block:
    - name: Check that is vscode installed
      ansible.builtin.debug:
        msg: to do make sure that is installed

    - name: Get the installed VSCode extensions
      ansible.builtin.command:
        cmd: "code --list-extensions"
      register: cmd_vscode_exts
      ignore_errors: true

    - name: Install VSCode extensions
      # become: true
      # become_user: "{{ user_name }}"
      ansible.builtin.command:
        cmd: "code --install-extension '{{ item }}'"
      loop: "{{ filtered_vscode_exts }}"
      vars:
        vscode_ext_list: "{{ cmd_vscode_exts.stdout | split() }}"
        filtered_vscode_exts: "{{ vscode_extensions | difference(vscode_ext_list) }}"

- name: Set up SSH
  ansible.builtin.import_tasks: ssh.yml

- name: Set up git
  ansible.builtin.import_tasks: git.yml



- name: VSCode Plugins
  when: "{{ unix.install_nix }}" 
  block:

    # - name: Check if my_package is installed
    #   ansible.builtin.shell: which nix
    #   # become: true
    #   # become_user: "{{ username_on_the_host }}"
    #   register: nix_check
    #   failed_when: nix_check.rc > 1
    #   changed_when: nix_check.rc == 1

    - name: Get stats of the FS object
      ansible.builtin.stat:
        path: /nix/var/nix/profiles/default/bin/nix
      register: nix_check

# - name: Starting playbook
#   ansible.builtin.debug:
#     msg: { { nix_check } }

- name: Download determinate nix installer
  ansible.builtin.get_url:
    url: https://install.determinate.systems/nix
    dest: /tmp/determinate-nix.sh
    checksum: sha256:4d22cbd666243d70353c8a6cee4ddaa8b329ca4ca45b710f9343b7f89ecb6297
  when: not nix_check.stat.exists

# https://chaosmail.github.io/programming/2015/03/04/install-deb-packages-in-ansible/
# TODO skip installation!
# - name: Install nix
#   # become: true
#   ansible.builtin.shell: cat /tmp/determinate-nix.sh | sh -s -- install --no-confirm --explain
#   when: not nix_check.stat.exists