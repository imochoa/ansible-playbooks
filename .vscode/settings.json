{
    "editor.formatOnSave": true,
    "files.associations": {
        "local.yml": "ansible"
        // "*init.yml": "yaml",
    },
    "terminal.integrated.commandsToSkipShell": [
        "Ctrl+P"
    ],
    "[ansible]": {
        "editor.detectIndentation": true,
        "editor.insertSpaces": true,
        "editor.tabSize": 2,
        "editor.quickSuggestions": {
            "comments": true,
            "other": true,
            "strings": true
        },
        "editor.formatOnSave": true,
        "editor.autoIndent": "advanced"
    },
    //Builtins
    // https://code.visualstudio.com/docs/languages/json
    "json.schemas": [
        {
            "fileMatch": [
                "policy.json"
            ],
            "url": "https://raw.githubusercontent.com/mozilla/gecko-dev/782abe7d859314a0d8a8b9832931731413ef6ea1/browser/components/enterprisepolicies/schemas/policies-schema.json"
            // "url": "https://searchfox.org/mozilla-central/source/browser/components/enterprisepolicies/schemas/policies-schema.json"
        }
        // https://nix-community.github.io/home-manager/options.xhtml#opt-programs.firefox.policies
        // https://mozilla.github.io/policy-templates/
        // https://linuxconfig.org/how-to-customize-firefox-using-the-policies-json-file
    ],
    // redhat.vscode-yaml plugin
    "yaml.schemas": {
        // docker-compose
        "https://raw.githubusercontent.com/compose-spec/compose-spec/master/schema/compose-spec.json": [
            "docker-compose.yml",
            "docker-compose.yaml"
        ],
    },
    "nix": {
        "enableLanguageServer": true,
        "formatterPath": "nixfmt",
        "serverPath": "nixd",
        // LSP config can be passed via the ``nix.serverSettings.{lsp}`` as shown below.
        "serverSettings": {
            // check https://github.com/nix-community/nixd/blob/main/nixd/docs/configuration.md for all nixd config
            "nixd": {
                "formatting": {
                    "command": [
                        "nixfmt"
                    ],
                },
                "options": {
                    // By default, this entry will be read from `import <nixpkgs> { }`.
                    // You can write arbitrary Nix expressions here, to produce valid "options" declaration result.
                    // Tip: for flake-based configuration, utilize `builtins.getFlake`
                    // "nixos": {
                    //   "expr": "(builtins.getFlake \"/absolute/path/to/flake\").nixosConfigurations.<name>.options",
                    // },
                    "home-manager": {
                        "expr": "(builtins.getFlake ./.).homeConfigurations.imochoa.options",
                    },
                    // Tip: use ${workspaceFolder} variable to define path
                    // "nix-darwin": {
                    //   "expr": "(builtins.getFlake \"${workspaceFolder}/path/to/flake\").darwinConfigurations.<name>.options",
                    // },
                },
            }
        }
    },
    "nixEnvSelector.nixFile": "${workspaceFolder}/flake.nix"
}