---

- name: Include common tasks
  ansible.builtin.include_role:
    name: unix

- name: Install brew formulae
  # become: true
  # become_user: "{{ user_name }}"
  community.general.homebrew:
    name: "{{ homebrew_installed_packages }}"
    state: present
    # path: "{{ brew_prefix | dirname }}"


# https://github.com/geerlingguy/ansible-collection-mac

# - name: Include common tasks
#   tags: ['homebrew']
#   ansible.builtin.include_role:
#     # https://github.com/geerlingguy/ansible-collection-mac/blob/master/roles/homebrew/README.md
#     name: geerlingguy.mac.homebrew
#   vars:
#     # All vars and defaults:
#     # homebrew_group: "{{ user_name }}"
#     # https://github.com/geerlingguy/ansible-collection-mac/blob/master/roles/homebrew/defaults/main.yml
#     homebrew_installed_packages:
#       - mysql
#       - ssh-copy-id
#       - pv
#       - { name: vim, install_options: "with-luajit,override-system-vi" }
#     homebrew_cask_apps:
#       - firefox
#       - { name: virtualbox, install_options: "debug, appdir=/Applications" }
#     homebrew_upgrade_all_packages: false
#     homebrew_uninstalled_packages: []
 
#   - role: geerlingguy.dotfiles
#     when: configure_dotfiles
#     tags: ['dotfiles']
#   - role: geerlingguy.mac.mas
#     when: mas_installed_apps or mas_installed_app_ids
#     tags: ['mas']
#   - role: geerlingguy.mac.dock
#     when: configure_dock
#     tags: ['dock']

# # Triggers 'xcode-select --install'
# - name: Install homebrew
#   shell: 'yes | /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"'
#   args:
#     creates: /opt/homebrew/bin/brew

# - name: Ensure homebrew is updated
#   homebrew:
#     state: latest
#     update_homebrew: true

# - name: Enable Homebrew bundle tap
#   homebrew_tap:
#     name: homebrew/bundle

# - name: Check if Brewfile contains updates
#   shell: brew bundle check --file="{{ brewfile | default('./Brewfile') }}"
#   register: bundle_check_result
#   ignore_errors: true

# # TODO: Homebrew Cask doesn't handle upgrading already installed applications
# #       at /Applications well at all
# - name: Install apps using Brewfile
#   shell: brew bundle install --file="{{ brewfile | default('./Brewfile') }}"
#   when: bundle_check_result is failed

# - name: Upgrade all packages
#   homebrew:
#     upgrade_all: true

# - name: Cleanup
#   shell: 'brew cleanup'
