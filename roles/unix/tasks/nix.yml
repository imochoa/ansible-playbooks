---
- name: ËœNix"
  block:
    - name: Check if nix is installed
      ansible.builtin.command: which nix
      register: nix_check
      ignore_errors: true
      check_mode: false
      changed_when: false

    - name: Download determinate nix installer
      when: nix_check.rc != 0
      ansible.builtin.get_url:
        url: https://install.determinate.systems/nix
        dest: /tmp/determinate-nix.sh
        mode: "0555"
        checksum: sha256:4d22cbd666243d70353c8a6cee4ddaa8b329ca4ca45b710f9343b7f89ecb6297

    - name: Install nix
      when: nix_check.rc != 0
      # become: true
      ansible.builtin.shell: cat /tmp/determinate-nix.sh | sh -s -- install --no-confirm --explain
# # Clone to ~/.config/home-manager

# # - name: Check if my_package is installed
# #   ansible.builtin.shell: which nix
# #   # become: true
# #   # become_user: "{{ username_on_the_host }}"
# #   register: nix_check
# #   failed_when: nix_check.rc > 1
# #   changed_when: nix_check.rc == 1

# - name: Get stats of the FS object
#   ansible.builtin.stat:
#     path: /nix/var/nix/profiles/default/bin/nix
#   register: nix_check

# # - name: Starting playbook
# #   ansible.builtin.debug:
# #     msg: { { nix_check } }

# - name: Download determinate nix installer
#   ansible.builtin.get_url:
#     url: https://install.determinate.systems/nix
#     dest: /tmp/determinate-nix.sh
#     checksum: sha256:46555f126c17dfe27bb33fedd4dc9b246abf55c147b04a8e929b65e16cd730a6
#   when: not nix_check.stat.exists

# # https://chaosmail.github.io/programming/2015/03/04/install-deb-packages-in-ansible/
# - name: Install nix
#   become: true
#   ansible.builtin.shell: cat /tmp/determinate-nix.sh | sh -s -- install --determinate --no-confirm --explain
#   when: not nix_check.stat.exists
# # # Home manager...
# # # TODO issues running in an env with nix available?
# # # https://chaosmail.github.io/programming/2015/03/04/install-deb-packages-in-ansible/
# # - name: Switch home manager
# #   become: true
# #   become_user: "{{ username_on_the_host }}"
# #   ansible.builtin.shell: /nix/var/nix/profiles/default/bin/nix run home-manager -- init --switch

# - name: Check if command already exists
#   # ansible.builtin.command:
#   #   argv:
#   #     - which
#   #     - nix
#   become: true
#   become_user: {{ username_on_the_host}}username_on_the_hostchoa
#   ansible.builtin.command:
#     argv:
#       - whoami
#       # - which
#       # - ls
#   register: command_check
#   ignore_errors: true
#   changed_when: false

# - debug: var=command_check

# acl pkgs
#  Home Manager init command as standalone Flake

# - name: Check if home manager directory exists
#   ansible.builtin.stat:
#     path: "/home/{{ username_on_the_host }}/.config/home-manager"
#   register: dir_check

# - name: Debug message if command exists (optional)
#   ansible.builtin.debug:
#     msg: "nix alreadksy installed, skipping script download/execution"
#   when: dir_check.stat.exists

# https://docs.ansible.com/ansible-core/2.16/playbook_guide/playbooks_privilege_escalation.html#risks-of-becoming-an-unprivileged-user
# - name: Make sure Home Manager is initialized
#   become: true
#   become_user: "{{ username_on_the_host }}"
#   # vars:
#   #   allow_world_readable_tmpfiles: true
#   ansible.builtin.command:
#     argv:
#       - /nix/var/nix/profiles/default/bin/nix
#       - run
#       - home-manager/master
#       - --
#       - init
#     creates: /home/{{ username_on_the_host }}/.config/home-manager
#   register: command_check
#   changed_when: false
# move only file "home.nix" to backup somewhere

# Clone a repo .config/home-manager

# nix switch

# - name: Install Home Manager if directory does not exist
#   when: not dir_check.stat.exists
#   vars:
#     someVar: "/opt/determinate-systems"
#   block:

# - name: Check if command already exists
#   become: true
#   become_user: "{{ username_on_the_host }}"
#   ansible.builtin.command:
#     chdir: "/home/{{  username_on_the_host }}/.config/home-manager"
#     argv:
#       - home-manager
#       - switch
#   register: command_b
#   ignore_errors: true
#   changed_when: false

# - name: Show command_check result
#   ansible.builtin.debug:
#     var: command_b
# - debug: var=command_checkkz

# # If it's a private repo...
# nix run nixpkgs#gh -- auth login
# nix run nixpkgs#gh -- repo clone <user>/<repo> ~/your-home
# # For public repos/after giving access to private ones...
# nix run home-manager -- switch --flake ~/your-home#<flakename>

# - name: Debug message if command exists (optional)
#   ansible.builtin.debug:
#     msg: "nix already installed, skipping script download/execution"
#   when: command_check.rc == 0

# - name: Install Nix if command does not exist
#   when: command_check.rc != 0
#   block:
#     # https://nix-community.github.io/home-manager/index.xhtml#sec-flakes-standalone
#     - name: FLAKE STANDALONE INSTALLATION
#       ansible.builtin.file:
#         path: "/opt/determinate-systems"
#         state: directory
#         mode: "0755"
#         # /nix/var/nix/profiles/default/bin/nix

#   #         nix run home-manager/master -- init

#   # For Nixpkgs or NixOS version 25.05 run

#   # nix run home-manager/release-25.05 -- init
